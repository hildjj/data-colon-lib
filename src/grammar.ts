
// Generated by peggy v. 2.0.1 (ts-pegjs plugin v. 3.0.0 )
//
// https://peggyjs.org/   https://github.com/metadevpro/ts-pegjs

"use strict";


import type {DataURL} from './types'


export interface FilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface FileRange {
  start: FilePosition;
  end: FilePosition;
  source: string;
}

export interface LiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface ClassParts extends Array<string | ClassParts> {}

export interface ClassExpectation {
  type: "class";
  parts: ClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface AnyExpectation {
  type: "any";
}

export interface EndExpectation {
  type: "end";
}

export interface OtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = LiteralExpectation | ClassExpectation | AnyExpectation | EndExpectation | OtherExpectation;

function peg$padEnd(str: string, targetLength: number, padString: string) {
  padString = padString || ' ';
  if (str.length > targetLength) {
    return str;
  }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

export class PeggySyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case "literal":
          return "\"" + literalEscape(expectation.text) + "\"";
        case "class":
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) + "-" + classEscape(part[1] as string)
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        case "any":
          return "any character";
        case "end":
          return "end of input";
        case "other":
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }

  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: FileRange;
  public name: string;

  constructor(message: string, expected: Expectation[], found: string | null, location: FileRange) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "PeggySyntaxError";

    if (typeof (Object as any).setPrototypeOf === "function") {
      (Object as any).setPrototypeOf(this, PeggySyntaxError.prototype);
    } else {
      (this as any).__proto__ = PeggySyntaxError.prototype;
    }
    if (typeof (Error as any).captureStackTrace === "function") {
      (Error as any).captureStackTrace(this, PeggySyntaxError);
    }
  }

  format(sources: { grammarSource?: string; text: string }[]): string {
    let str = 'Error: ' + this.message;
    if (this.location) {
      let src: string[] | null = null;
      let k;
      for (k = 0; k < sources.length; k++) {
        if (sources[k].grammarSource === this.location.source) {
          src = sources[k].text.split(/\r\n|\n|\r/g);
          break;
        }
      }
      let s = this.location.start;
      let loc = this.location.source + ':' + s.line + ':' + s.column;
      if (src) {
        let e = this.location.end;
        let filler = peg$padEnd('', s.line.toString().length, ' ');
        let line = src[s.line - 1];
        let last = s.line === e.line ? e.column : line.length + 1;
        str += '\n --> ' + loc + '\n' + filler + ' |\n' + s.line + ' | ' + line + '\n' + filler + ' | ' +
          peg$padEnd('', s.column - 1, ' ') +
          peg$padEnd('', last - s.column, '^');
      } else {
        str += '\n at ' + loc;
      }
    }
    return str;
  }
}

function peg$parse(input: string, options?: ParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<any> = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions: {[id: string]: any} = { dataurl: peg$parsedataurl };
  let peg$startRuleFunction: () => any = peg$parsedataurl;

  const peg$c0 = "data:";
  const peg$c1 = peg$literalExpectation("data:", false);
  const peg$c2 = ";base64";
  const peg$c3 = peg$literalExpectation(";base64", false);
  const peg$c4 = ",";
  const peg$c5 = peg$literalExpectation(",", false);
  const peg$c6 = function(mediatype: any, b64: any, data: any): any {
      return {
        mediatype: mediatype ?? {
          type: null,
          subtype: null,
          parameters: [],
        },
        base64: Boolean(b64),
        data
      } as DataURL
    };
  const peg$c7 = "/";
  const peg$c8 = peg$literalExpectation("/", false);
  const peg$c9 = ";";
  const peg$c10 = peg$literalExpectation(";", false);
  const peg$c11 = function(ts: any, parameters: any): any {
      return {
        type: ts?.type,
        subtype: ts?.subtype,
        parameters
      }
    };
  const peg$c12 = "text";
  const peg$c13 = peg$literalExpectation("text", false);
  const peg$c14 = "image";
  const peg$c15 = peg$literalExpectation("image", false);
  const peg$c16 = "audio";
  const peg$c17 = peg$literalExpectation("audio", false);
  const peg$c18 = "video";
  const peg$c19 = peg$literalExpectation("video", false);
  const peg$c20 = "application";
  const peg$c21 = peg$literalExpectation("application", false);
  const peg$c22 = "message";
  const peg$c23 = peg$literalExpectation("message", false);
  const peg$c24 = "multipart";
  const peg$c25 = peg$literalExpectation("multipart", false);
  const peg$c26 = "font";
  const peg$c27 = peg$literalExpectation("font", false);
  const peg$c28 = "example";
  const peg$c29 = peg$literalExpectation("example", false);
  const peg$c30 = "model";
  const peg$c31 = peg$literalExpectation("model", false);
  const peg$c32 = "x-";
  const peg$c33 = peg$literalExpectation("x-", true);
  const peg$c34 = function(u: any): any { return u.join('') };
  const peg$c35 = "=";
  const peg$c36 = peg$literalExpectation("=", false);
  const peg$c37 = "\"";
  const peg$c38 = peg$literalExpectation("\"", false);
  const peg$c39 = /^[!#-[\]-~]/;
  const peg$c40 = peg$classExpectation(["!", ["#", "["], ["]", "~"]], false, false);
  const peg$c41 = "\\";
  const peg$c42 = peg$literalExpectation("\\", false);
  const peg$c43 = "\0";
  const peg$c44 = peg$literalExpectation("\0", false);
  const peg$c45 = /^[\x01-\b\v\f\x0E-\x1F\x7F]/;
  const peg$c46 = peg$classExpectation([["\x01", "\b"], "\v", "\f", ["\x0E", "\x1F"], "\x7F"], false, false);
  const peg$c47 = "\r";
  const peg$c48 = peg$literalExpectation("\r", false);
  const peg$c49 = "\n";
  const peg$c50 = peg$literalExpectation("\n", false);
  const peg$c51 = /^[!-~]/;
  const peg$c52 = peg$classExpectation([["!", "~"]], false, false);
  const peg$c53 = /^[ \t]/;
  const peg$c54 = peg$classExpectation([" ", "\t"], false, false);
  const peg$c55 = /^[!#$%&'*+.0-9A-Z\^_`a-z{|}~\-]/;
  const peg$c56 = peg$classExpectation(["!", "#", "$", "%", "&", "'", "*", "+", ".", ["0", "9"], ["A", "Z"], "^", "_", "`", ["a", "z"], "{", "|", "}", "~", "-"], false, false);
  const peg$c57 = /^[\-_.!~*'()]/;
  const peg$c58 = peg$classExpectation(["-", "_", ".", "!", "~", "*", "'", "(", ")"], false, false);
  const peg$c59 = /^[;\/?:@&=+$,]/;
  const peg$c60 = peg$classExpectation([";", "/", "?", ":", "@", "&", "=", "+", "$", ","], false, false);
  const peg$c61 = "%";
  const peg$c62 = peg$literalExpectation("%", false);
  const peg$c63 = function(h1: any, h2: any): any { return String.fromCharCode(parseInt(h1+h2, 16)) };
  const peg$c64 = /^[a-f]/i;
  const peg$c65 = peg$classExpectation([["a", "f"]], false, true);
  const peg$c66 = /^[a-z]/i;
  const peg$c67 = peg$classExpectation([["a", "z"]], false, true);
  const peg$c68 = /^[0-9]/;
  const peg$c69 = peg$classExpectation([["0", "9"]], false, false);

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): FileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: FileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1
    );
  }

  function error(message: string, location1?: FileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(text1: string, ignoreCase: boolean): LiteralExpectation {
    return { type: "literal", text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts: ClassParts, inverted: boolean, ignoreCase: boolean): ClassExpectation {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation(): AnyExpectation {
    return { type: "any" };
  }

  function peg$endExpectation(): EndExpectation {
    return { type: "end" };
  }

  function peg$otherExpectation(description: string): OtherExpectation {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): FileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: FileRange) {
    return new PeggySyntaxError(message, [], "", location1);
  }

  function peg$buildStructuredError(expected1: Expectation[], found: string | null, location1: FileRange) {
    return new PeggySyntaxError(
      PeggySyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1
    );
  }

  function peg$parsedataurl(): DataURL {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsemediatype();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c2) {
          s3 = peg$c2;
          peg$currPos += 7;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c3); }
        }
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c4;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parsedata();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c6(s2, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemediatype(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsetype();
    if (s2 as any !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s3 = peg$c7;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parsesubtype();
        if (s4 as any !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s4 = peg$c9;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseparameter();
        if (s5 as any !== peg$FAILED) {
          s3 = s5;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 59) {
          s4 = peg$c9;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseparameter();
          if (s5 as any !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c11(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetype(): any {
    let s0;

    s0 = peg$parsediscrete_type();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsecomposite_type();
    }

    return s0;
  }

  function peg$parsesubtype(): any {
    let s0;

    s0 = peg$parseextension_token();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsetoken();
    }

    return s0;
  }

  function peg$parsediscrete_type(): any {
    let s0;

    if (input.substr(peg$currPos, 4) === peg$c12) {
      s0 = peg$c12;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c13); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c14) {
        s0 = peg$c14;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c15); }
      }
      if (s0 as any === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c16) {
          s0 = peg$c16;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s0 as any === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c18) {
            s0 = peg$c18;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c19); }
          }
          if (s0 as any === peg$FAILED) {
            if (input.substr(peg$currPos, 11) === peg$c20) {
              s0 = peg$c20;
              peg$currPos += 11;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c21); }
            }
            if (s0 as any === peg$FAILED) {
              s0 = peg$parseextension_token();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecomposite_type(): any {
    let s0;

    if (input.substr(peg$currPos, 7) === peg$c22) {
      s0 = peg$c22;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c24) {
        s0 = peg$c24;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }
    }

    return s0;
  }

  function peg$parseextension_token(): any {
    let s0;

    s0 = peg$parseietf_token();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsex_token();
    }

    return s0;
  }

  function peg$parseietf_token(): any {
    let s0;

    if (input.substr(peg$currPos, 4) === peg$c26) {
      s0 = peg$c26;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c27); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c28) {
        s0 = peg$c28;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s0 as any === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c30) {
          s0 = peg$c30;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c31); }
        }
      }
    }

    return s0;
  }

  function peg$parsex_token(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c32) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c33); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsetoken();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parsecomposite_type();
        if (s3 as any !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedata(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseuric();
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseuric();
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c34(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseparameter(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsetoken();
    if (s1 as any !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c35;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c36); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parsevalue();
        if (s3 as any !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevalue(): any {
    let s0;

    s0 = peg$parsetoken();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsequoted_string();
    }

    return s0;
  }

  function peg$parsequoted_string(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c37;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c38); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseqtext();
      if (s4 as any === peg$FAILED) {
        s4 = peg$parsequoted_pair();
      }
      while (s4 as any !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseqtext();
        if (s4 as any === peg$FAILED) {
          s4 = peg$parsequoted_pair();
        }
      }
      if (s3 as any !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c37;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c38); }
        }
        if (s3 as any !== peg$FAILED) {
          s0 = s2;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseqtext(): any {
    let s0;

    if (peg$c39.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c40); }
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseobs_NO_WS_CTL();
    }

    return s0;
  }

  function peg$parsequoted_pair(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c41;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c42); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseVCHAR();
      if (s2 as any === peg$FAILED) {
        s2 = peg$parseWSP();
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseobs_qp();
    }

    return s0;
  }

  function peg$parseobs_qp(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c41;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c42); }
    }
    if (s1 as any !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 0) {
        s2 = peg$c43;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }
      if (s2 as any === peg$FAILED) {
        s2 = peg$parseobs_NO_WS_CTL();
        if (s2 as any === peg$FAILED) {
          s2 = peg$parseLF();
          if (s2 as any === peg$FAILED) {
            s2 = peg$parseCR();
          }
        }
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseobs_NO_WS_CTL(): any {
    let s0;

    if (peg$c45.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }

    return s0;
  }

  function peg$parseFWS(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseWSP();
    while (s3 as any !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parseWSP();
    }
    if (s2 as any !== peg$FAILED) {
      s3 = peg$parseCRLF();
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseWSP();
      if (s3 as any !== peg$FAILED) {
        while (s3 as any !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseWSP();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseobs_FWS();
    }

    return s0;
  }

  function peg$parseobs_FWS(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseWSP();
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseWSP();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCRLF();
      if (s4 as any !== peg$FAILED) {
        s5 = [];
        s6 = peg$parseWSP();
        if (s6 as any !== peg$FAILED) {
          while (s6 as any !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseWSP();
          }
        } else {
          s5 = peg$FAILED;
        }
        if (s5 as any !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCRLF();
        if (s4 as any !== peg$FAILED) {
          s5 = [];
          s6 = peg$parseWSP();
          if (s6 as any !== peg$FAILED) {
            while (s6 as any !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseWSP();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCR(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 13) {
      s0 = peg$c47;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c48); }
    }

    return s0;
  }

  function peg$parseLF(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c49;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c50); }
    }

    return s0;
  }

  function peg$parseCRLF(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseCR();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseLF();
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVCHAR(): any {
    let s0;

    if (peg$c51.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c52); }
    }

    return s0;
  }

  function peg$parseWSP(): any {
    let s0;

    if (peg$c53.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c54); }
    }

    return s0;
  }

  function peg$parsetoken(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsetokenc();
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsetokenc();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsetokenc(): any {
    let s0;

    if (peg$c55.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c56); }
    }

    return s0;
  }

  function peg$parseuric(): any {
    let s0;

    s0 = peg$parseescaped();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsereserved();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseunreserved();
      }
    }

    return s0;
  }

  function peg$parseunreserved(): any {
    let s0;

    s0 = peg$parsealphanum();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsemark();
    }

    return s0;
  }

  function peg$parsemark(): any {
    let s0;

    if (peg$c57.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c58); }
    }

    return s0;
  }

  function peg$parsereserved(): any {
    let s0;

    if (peg$c59.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }

    return s0;
  }

  function peg$parseescaped(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 37) {
      s1 = peg$c61;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c62); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsehex();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parsehex();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c63(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehex(): any {
    let s0;

    s0 = peg$parsedigit();
    if (s0 as any === peg$FAILED) {
      if (peg$c64.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }
    }

    return s0;
  }

  function peg$parsealphanum(): any {
    let s0;

    s0 = peg$parsealpha();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsedigit();
    }

    return s0;
  }

  function peg$parsealpha(): any {
    let s0;

    if (peg$c66.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c67); }
    }

    return s0;
  }

  function peg$parsedigit(): any {
    let s0;

    if (peg$c68.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export interface ParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: ParseOptions) => any;
export const parse: ParseFunction = peg$parse;

